# Simple Non-preemptive Shortest Job First (SJF) Scheduling

n = int(input("Enter number of processes: "))

processes = []
for i in range(n):
    at = int(input(f"Enter Arrival Time for P{i+1}: "))
    bt = int(input(f"Enter Burst Time for P{i+1}: "))
    processes.append([i+1, at, bt])  # [PID, AT, BT]

waiting = [0]*n
turnaround = [0]*n
done = [False]*n
time = 0
completed = 0

while completed < n:
    idx = -1
    min_bt = float("inf")

    # choose process with shortest burst among arrived
    for i in range(n):
        if processes[i][1] <= time and not done[i]:
            if processes[i][2] < min_bt:
                min_bt = processes[i][2]
                idx = i

    if idx != -1:
        time += processes[idx][2]
        turnaround[idx] = time - processes[idx][1]
        waiting[idx] = turnaround[idx] - processes[idx][2]
        done[idx] = True
        completed += 1
    else:
        time += 1  # CPU idle

# Output
print("\nProcess\tAT\tBT\tWT\tTAT")
for i in range(n):
    print(f"P{processes[i][0]}\t{processes[i][1]}\t{processes[i][2]}\t{waiting[i]}\t{turnaround[i]}")

print(f"\nAverage Waiting Time = {sum(waiting)/n:.2f}")
print(f"Average Turnaround Time = {sum(turnaround)/n:.2f}")
