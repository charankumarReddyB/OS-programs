"""
producer_consumer.py
Classic producer-consumer using threading.Semaphore and a buffer.
"""
import threading
import time
import random
from collections import deque

buffer = deque()
BUFFER_SIZE = 5
mutex = threading.Lock()
empty = threading.Semaphore(BUFFER_SIZE)
full = threading.Semaphore(0)

def producer(id, count=10):
    for i in range(count):
        time.sleep(random()/2)
        empty.acquire()
        with mutex:
            item = f"item-{id}-{i}"
            buffer.append(item)
            print(f"P{id} produced {item}")
        full.release()

def consumer(id, count=10):
    for i in range(count):
        full.acquire()
        with mutex:
            item = buffer.popleft()
            print(f"C{id} consumed {item}")
        empty.release()
        time.sleep(random()/2)

if __name__ == "__main__":
    p = threading.Thread(target=producer, args=(1,20))
    c = threading.Thread(target=consumer, args=(1,20))
    p.start(); c.start()
    p.join(); c.join()
    print("Done")
